# Copyright (C) 2007 Maryland Robotics Club
# Copyright (C) 2007 Joseph Lisee <jlisee@umd.edu>
# All rights reserved.
#
# Author: Joseph Lisee <jlisee@umd.edu>
# File:  wrappers/pattern/SConscript

import os

# Build System imports
import buildfiles.libs as libs

Import('env')
envl = env.Clone()

# Link to libram_pattern.so library
libs.add_internal(envl, 'vehicle')

# Pattern library directories
base_dir = os.path.join(os.environ['RAM_SVN_DIR'], 'packages', 'vehicle')
header_dir = os.path.join(base_dir, 'include')

# Need for because Py++ has so odd include paths
envl.Append(CPPPATH = base_dir)

# Headers we are currently wrapping
veh_wrapped_headers = ['IVehicle.h']

dev_wrapped_headers = ['device/IDevice.h',
                       'device/IThruster.h']

# Tests
envt = env.Clone()
test_veh, veh_runner = envt.Tests(target = 'TestVehicle',
                                  source = 'test/src/TestIVehicle.cxx',
                                  int_deps = 'vehicle',
                                  ext_deps = 'Boost.Python', run = False)

test_dev, dev_runner = envt.Tests(target = 'TestDevices',
                                  source = 'test/src/TestIDevices.cxx',
                                  int_deps = 'vehicle',
                                  ext_deps = 'Boost.Python', run = False)

# Wrapper
envw = envl.Clone()
envw.Pypp('_vehicle',
          [os.path.join(header_dir, h) for h in veh_wrapped_headers],
          module = 'gen_vehicle.py',
          tester = veh_runner, dep_wrappers = ['math', '_core'])

envw = envl.Clone()
envw.Pypp('_vehicle::device',
          [os.path.join(header_dir, h) for h in dev_wrapped_headers],
          module = 'gen_vehicle_device.py',
          tester = dev_runner, dep_wrappers = ['_vehicle'])

# Python sources
py_sources = env.Glob(os.path.join('python','vehicle'), '*.py')
output_dir = os.environ['RAM_SVN_DIR'] + '/build_ext/ext/vehicle'

py_install = env.Install(dir = output_dir, source = py_sources)

env.Depends(test_veh, py_install)
env.Depends(test_dev, py_install)
