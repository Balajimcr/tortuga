# Copyright (C) 2007 Maryland Robotics Club
# Copyright (C) 2007 Joseph Lisee <jlisee@umd.edu>
# All rights reserved.
#
# Author: Joseph Lisee <jlisee@umd.edu>
# File:  wrappers/pattern/SConscript

import os

# Build System imports
import buildfiles.wrap as wrap
import buildfiles.libs as libs
import buildfiles.helpers as helpers

Import('env')
envl = env.Clone()

# Link in internal libraries
libs.add_internal(envl, 'math')
if env.HasFeature('core'):
    libs.add_internal(envl, 'core')

# Pattern library directories
base_dir = os.path.join(os.environ['RAM_SVN_DIR'], 'packages', 'math')
header_dir = os.path.join(base_dir, 'include')

# Need for because Py++ has so odd include paths
envl.Append(CPPPATH = base_dir)

# Headers we are currently wrapping
wrapped_headers = ['Math.h', 'Vector3.h', 'Quaternion.h', 'Matrix3.h']

if env.HasFeature('core'):
    wrapped_headers.append('Events.h')
wrapped_headers = [os.path.join(header_dir, h) for h in wrapped_headers]

# Tests
envt = env.Clone()
test_prog, runner = envt.Tests(int_deps = 'math', ext_deps = 'Boost.Python',
                               run = False)

py_sources = [os.path.abspath(s) for s in envl.Glob('python', '*.py')]
def extras(env, output, message = None, deps = None):
    tester = runner(env, output, message, deps)
    py_install = env.Install(dir = os.environ['RAM_SVN_DIR'] + '/build_ext/ext',
                             source = py_sources)

    env.Depends(tester, py_install)    
    return tester

# Wrappers
dep_wrappers = []
if env.HasFeature('core'):
    dep_wrappers.extend(['_core','core.py'])

libs.add_external(envl, 'Boost.Python')
envl.Pypp('_math', wrapped_headers, module = 'gen_math.py',
          tester = extras, dep_wrappers = dep_wrappers)
