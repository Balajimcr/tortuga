# This is our config file
# It tells the program what kind of vehicle to create

# --------------------------------------------------------------------------- #
#                     G E N E R A L   O P T I O N S                           #
# --------------------------------------------------------------------------- #

# This the vehicle that wish to create (see below for the options)
vehicle: Simulated

Logging:
    # Loggers are organized in a tree and message propgate upward by default
    # and are passed to every handler they find along the way until they hit
    # the root logger, or a logger which has "propgate: 0"
    Loggers:
        Root:
            level: INFO
            handlers: [Console, File]

        Event:
            level: WARNING
            name: event

    # The handlers are what output the actual the log messages and they are 
    # attached to the loggers
    Handlers:
        Console:
            class: StreamHandler
            level: WARNING
            formatter: Console
            args: (sys.stdout,)
        File:
            class: FileHandler
            level: INFO
            formatter: File
            args: ('../logs/log.txt', 'w')

    # Called on every log messages by the handler before output            
    Formatters:
        Console:
            format: '%(name)-12s- %(message)s'
            class: logging.Formatter
        File:
            format: '%(asctime)s %(name)-12s %(levelname) -8s %(message)s'
            class: logging.Formatter
            

# --------------------------------------------------------------------------- #
#                             V E H I C L E S                                 #
# --------------------------------------------------------------------------- #
Vehicles:

    # ------------------------- S I M U L A T E D --------------------------- #
    Simulated:
        # In kilograms
        mass: 26.0  # About 0.5% bouyant
        # In the X, Y, and Z direction
        # Actual size in meters
        size: [0.2032, 0.2032, 0.6858]
        position: [0.0, 0.0, 0.0]
        # In Axis/Angle Form (last term angle)
        orientation: [0.0, 0.0, 1.0, 0.0]

        # This is all the devices that will be attached to the body of the sub
        # The name of each is the type of device to create
        Devices:
            # For each simulated thruster you need to give its type, relative
            # to the body coordinate system (describe me here)
            # Y is UP, Z comes out the front of the vehicle and when looking at
            # vehicle from the back X comes out the right (starboard) side 
            PortThruster:
                # The type of device to create
                type: SimThruster
                # Position relative to vehicle
                position: [-0.16, 0, 0]
                # A unit vector along which thrust will be applied
                direction: [0, 0, -1]
                # The maximum avialable thrust (in Newtons)
                strength: 30
                
                Graphical:
                    mesh: cylinder.mesh
                    material: Simple/BumpyMetal
                    scale: [0.15,0.047,0.047]
                    orientation: [0, 1, 0, 90]
                
            StarboardThruster:
                type: SimThruster
                position: [0.16, 0, 0]
                direction: [0, 0, -1]
                strength: 30
                
                Graphical:
                    mesh: cylinder.mesh
                    material: Simple/BumpyMetal
                    scale: [0.15,0.047,0.047]
                    orientation: [0, 1, 0, 90]
                    
            ForeThruster:
                type: SimThruster
                position: [0, 0, 0.4]
                direction: [0, 1, 0]
                strength: 30
                
                Graphical:
                    mesh: cylinder.mesh
                    material: Simple/BumpyMetal
                    scale: [0.15,0.047,0.047]
                    orientation: [0, 0, 1, 90]
                    
            AftThruster:
                type: SimThruster
                position: [0, 0, -0.4]
                direction: [0, 1, 0]
                strength: 30
                
                Graphical:
                    mesh: cylinder.mesh
                    material: Simple/BumpyMetal
                    scale: [0.15,0.047,0.047]
                    orientation: [0, 0, 1, 90]
    
        # This describes all the general
        Scenes:
            # The curren scene to load, must be a python module on the given
            # scene_path, this for example is 'data/scenes/basic.py
            current: basic
            
            # Searh path for scene files
            path: ['../data/scenes']
        
        Physics:
            # Number of time persecond you wished to have the physics updated
            update_rate: 60
        
        # This secion here takes over for Ogre's ogre.cfg.  The type 
        # indicates which Ogre RenderSystem to create and which section to
        # load the options from
        Graphics:
            # This is a special case of the above logging format, basically it
            # creates a logger which sends messages upward that have a level at
            # or higher than it
            Logging:
                name: Graphics
                level: INFO
        

            RenderSystem:
                type: GLRenderSystem
                
                GLRenderSystem:
                    - [Colour Depth, '32']
                    - [Display Frequency, 'N/A']
                    - [FSAA, '0']
                    - [Full Screen, 'No']
                    - [RTT Preferred Mode, 'FBO']
                    - [VSync, 'No']
                    - [Video Mode, 800 x 600]
            Plugins:
                # Where to search for the plugins
                search_path: [ 'C:\Libraries\Python-Ogre-0.7\plugins',
                               'C:\Developement\Python-Ogre\Python-Ogre-0.7\plugins']

                # The plugins to load
                plugins: [ RenderSystem_GL, 
                           Plugin_ParticleFX, 
                           Plugin_OctreeSceneManager ]
            
            # This replaces Ogre's resources.cfg, Each node under resources
            # is a group and each node under that is an archive type, with a 
            # list of directories to load for that type
            Resources:
                General:
                    Zip: ['../media/packs/OgreCore.zip',
                          '../media/packs/cubemapsJS.zip']
                    FileSystem: ['../media/models',
                                 '../media/primitives',
                                 '../media/materials/textures',
                                 '../media/materials/scripts']

                GUI:
                     FileSystem: ['../data/gui/',
                                  '../data/gui/schemes',
                                  '../data/gui/fonts']
            
        GUI:
            Logging:
                name: GUI
                level: INFO
        
            # These settings are used by the underlying GUI toolkit (CEGUI)
            scheme: TaharezLookSkin.scheme
            look: TaharezLook
            font: BlueHighway-12