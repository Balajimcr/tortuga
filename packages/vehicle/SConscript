# Copyright (C) 2007 Robotics at Maryland
# Copyright (C) 2007 Joseph Lisee <jlisee@umd.edu>
# All rights reserved.
#
# Author: Joseph Lisee <jlisee@umd.edu>
# File:  packages/vehicle/SConscript

# Copy Our Build Environment
Import('env')
envl = env.Clone()

# Sources
sources = env.Glob('src', '*.cpp')
sources.extend(env.Glob('src/device', '*.cpp'))

# If we aren't building the drivers, remove the sources that depend on them
if not env.HasFeature('drivers'):
    # Remove hardware vehicle
    sources.remove('src/Vehicle.cpp')

    # Remove hardware devices
    sources.remove('src/device/IMU.cpp')
    sources.remove('src/device/PSU.cpp')
    sources.remove('src/device/ThrusterCommand.cpp')
    sources.remove('src/device/ThrusterCommunicator.cpp')

# Build Procducts (library will be called 'libram_vehicle.so')
envl.RAMSharedLibrary('vehicle',  source = sources)


# Testing
envt = env.Clone()

if env.HasFeature('drivers'):
    envt.RAMProgram(target = 'ThrusterDemo', 
                    source = 'test/src/ThrusterDemo.cpp',
                    int_deps = 'vehicle',
                    ext_deps = ['Boost.ProgramOptions'])

    envt.RAMProgram(target = 'IMUDemo', 
                    source = 'test/src/IMUDemo.cpp',
                    int_deps = 'vehicle')

# Unit Tests
exclude_list = []
if not env.HasFeature('drivers'):
    exclude_list.extend(['test/src/TestnIMU.cxx',
                         'test/src/TestTortuga.cxx'])
envt = env.Clone()
envt.Tests(int_deps = 'vehicle', exclude = exclude_list)
