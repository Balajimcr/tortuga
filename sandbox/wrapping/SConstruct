import os

tpath = os.path.join(os.environ['RAM_SVN_DIR'],'buildfiles','tools')
env = Environment(ENV=os.environ, tools = ['default', 'gccxml'],
                  toolpath = [tpath])
env.Append(CPPPATH = [ 'include'])

# Compile are Test Library
sources = ['src/Vehicle.cpp', 'src/device/PSU.cpp']
vehicle_lib = env.SharedLibrary(target = 'build/vehicle', source = sources)

install_file = os.path.join('lib', os.path.basename(str(vehicle_lib[0])))
env.InstallAs(target = install_file, source = vehicle_lib)

# Generate out wrapper
import helpers

envw = env.Clone()

envw.Append(LIBS = ['vehicle'])
envw.Append(LIBPATH = ['lib'])

headers_to_wrap = ['include/Vehicle.h', 'include/device/Device.h',
                   'include/device/PSU.h']
helpers.wrap_headers(envw, 'vehicle', headers_to_wrap)
