function [methodinfo,structs,enuminfo]=test;
%This function was generated by the perl file prototypes.pl called from loadlibary.m on Thu Jun 28 18:24:32 2007
%perl options:'demo_controller.i -outfile=test.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
structs=[];enuminfo=[];fcnNum=1;
%  void translationalController(MeasuredState* measuredState, DesiredState* desiredState, ControllerState* controllerState, double dt, double* translationalForces); 
fcns.name{fcnNum}='translationalController'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MeasuredStatePtr', 'DesiredStatePtr', 'ControllerStatePtr', 'double', 'doublePtr'};fcnNum=fcnNum+1;
%  void testMeasured(MeasuredState* measuredState); 
fcns.name{fcnNum}='testMeasured'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MeasuredStatePtr'};fcnNum=fcnNum+1;
%  void testDesired(DesiredState* desiredState); 
fcns.name{fcnNum}='testDesired'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'DesiredStatePtr'};fcnNum=fcnNum+1;
%  void testController(ControllerState* controllerState); 
fcns.name{fcnNum}='testController'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ControllerStatePtr'};fcnNum=fcnNum+1;
%  void testStruct(TestStruct* test); 
fcns.name{fcnNum}='testStruct'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'TestStructPtr'};fcnNum=fcnNum+1;
structs.DesiredState.packing=8;
structs.DesiredState.members=struct('speed', 'double', 'depth', 'double', 'error0', ' double quaternion[4]', 'error1', ' double angularRate[3]');
structs.MeasuredState.packing=8;
structs.MeasuredState.members=struct('depth', 'double', 'error0', ' double linearAcceleration[3]', 'error1', ' double quaternion[4]', 'error2', ' double angularRate[3]');
structs.ControllerState.packing=8;
structs.ControllerState.members=struct('error0', ' double inertiaEstimate[6]', 'error1', ' double adaptationGain[3][3]', 'error2', ' double angularGain[3][3]', 'depthPGain', 'double', 'speedPGain', 'double');
structs.TestStruct.packing=8;
structs.TestStruct.members=struct('depth', 'double', 'q0', 'double', 'q1', 'double', 'q2', 'double', 'q3', 'double');
methodinfo=fcns;